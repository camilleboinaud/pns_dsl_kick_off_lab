/*
 * generated by Xtext
 */
grammar InternalArduinoML;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package arduinoML.concretesyntax.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package arduinoML.concretesyntax.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import arduinoML.concretesyntax.services.ArduinoMLGrammarAccess;

}

@parser::members {
 
 	private ArduinoMLGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(ArduinoMLGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleApp
entryRuleApp 
:
{ before(grammarAccess.getAppRule()); }
	 ruleApp
{ after(grammarAccess.getAppRule()); } 
	 EOF 
;

// Rule App
ruleApp
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAppAccess().getGroup()); }
(rule__App__Group__0)
{ after(grammarAccess.getAppAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBrick
entryRuleBrick 
:
{ before(grammarAccess.getBrickRule()); }
	 ruleBrick
{ after(grammarAccess.getBrickRule()); } 
	 EOF 
;

// Rule Brick
ruleBrick
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBrickAccess().getGroup()); }
(rule__Brick__Group__0)
{ after(grammarAccess.getBrickAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEString
entryRuleEString 
:
{ before(grammarAccess.getEStringRule()); }
	 ruleEString
{ after(grammarAccess.getEStringRule()); } 
	 EOF 
;

// Rule EString
ruleEString
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEStringAccess().getAlternatives()); }
(rule__EString__Alternatives)
{ after(grammarAccess.getEStringAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleState
entryRuleState 
:
{ before(grammarAccess.getStateRule()); }
	 ruleState
{ after(grammarAccess.getStateRule()); } 
	 EOF 
;

// Rule State
ruleState
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStateAccess().getGroup()); }
(rule__State__Group__0)
{ after(grammarAccess.getStateAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEInt
entryRuleEInt 
:
{ before(grammarAccess.getEIntRule()); }
	 ruleEInt
{ after(grammarAccess.getEIntRule()); } 
	 EOF 
;

// Rule EInt
ruleEInt
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEIntAccess().getGroup()); }
(rule__EInt__Group__0)
{ after(grammarAccess.getEIntAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSensor
entryRuleSensor 
:
{ before(grammarAccess.getSensorRule()); }
	 ruleSensor
{ after(grammarAccess.getSensorRule()); } 
	 EOF 
;

// Rule Sensor
ruleSensor
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSensorAccess().getGroup()); }
(rule__Sensor__Group__0)
{ after(grammarAccess.getSensorAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleActuator
entryRuleActuator 
:
{ before(grammarAccess.getActuatorRule()); }
	 ruleActuator
{ after(grammarAccess.getActuatorRule()); } 
	 EOF 
;

// Rule Actuator
ruleActuator
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getActuatorAccess().getGroup()); }
(rule__Actuator__Group__0)
{ after(grammarAccess.getActuatorAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAction
entryRuleAction 
:
{ before(grammarAccess.getActionRule()); }
	 ruleAction
{ after(grammarAccess.getActionRule()); } 
	 EOF 
;

// Rule Action
ruleAction
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getActionAccess().getGroup()); }
(rule__Action__Group__0)
{ after(grammarAccess.getActionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTransition
entryRuleTransition 
:
{ before(grammarAccess.getTransitionRule()); }
	 ruleTransition
{ after(grammarAccess.getTransitionRule()); } 
	 EOF 
;

// Rule Transition
ruleTransition
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTransitionAccess().getGroup()); }
(rule__Transition__Group__0)
{ after(grammarAccess.getTransitionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}




// Rule Signal
ruleSignal
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignalAccess().getAlternatives()); }
(rule__Signal__Alternatives)
{ after(grammarAccess.getSignalAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Brick__Alternatives_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBrickAccess().getSensorParserRuleCall_0_0()); }
	ruleSensor
{ after(grammarAccess.getBrickAccess().getSensorParserRuleCall_0_0()); }
)

    |(
{ before(grammarAccess.getBrickAccess().getActuatorParserRuleCall_0_1()); }
	ruleActuator
{ after(grammarAccess.getBrickAccess().getActuatorParserRuleCall_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EString__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0()); }
	RULE_STRING
{ after(grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0()); }
)

    |(
{ before(grammarAccess.getEStringAccess().getIDTerminalRuleCall_1()); }
	RULE_ID
{ after(grammarAccess.getEStringAccess().getIDTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Signal__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignalAccess().getHIGHEnumLiteralDeclaration_0()); }
(	'high' 
)
{ after(grammarAccess.getSignalAccess().getHIGHEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getSignalAccess().getLOWEnumLiteralDeclaration_1()); }
(	'low' 
)
{ after(grammarAccess.getSignalAccess().getLOWEnumLiteralDeclaration_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__App__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__App__Group__0__Impl
	rule__App__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__App__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAppAccess().getAppKeyword_0()); }

	'app' 

{ after(grammarAccess.getAppAccess().getAppKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__App__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__App__Group__1__Impl
	rule__App__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__App__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAppAccess().getNameAssignment_1()); }
(rule__App__NameAssignment_1)
{ after(grammarAccess.getAppAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__App__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__App__Group__2__Impl
	rule__App__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__App__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAppAccess().getInitialKeyword_2()); }

	'initial' 

{ after(grammarAccess.getAppAccess().getInitialKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__App__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__App__Group__3__Impl
	rule__App__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__App__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAppAccess().getInitialAssignment_3()); }
(rule__App__InitialAssignment_3)
{ after(grammarAccess.getAppAccess().getInitialAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__App__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__App__Group__4__Impl
	rule__App__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__App__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAppAccess().getLeftCurlyBracketKeyword_4()); }

	'{' 

{ after(grammarAccess.getAppAccess().getLeftCurlyBracketKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__App__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__App__Group__5__Impl
	rule__App__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__App__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAppAccess().getBricksKeyword_5()); }

	'bricks' 

{ after(grammarAccess.getAppAccess().getBricksKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__App__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__App__Group__6__Impl
	rule__App__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__App__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAppAccess().getLeftCurlyBracketKeyword_6()); }

	'{' 

{ after(grammarAccess.getAppAccess().getLeftCurlyBracketKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__App__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__App__Group__7__Impl
	rule__App__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__App__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAppAccess().getBricksAssignment_7()); }
(rule__App__BricksAssignment_7)
{ after(grammarAccess.getAppAccess().getBricksAssignment_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__App__Group__8
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__App__Group__8__Impl
	rule__App__Group__9
;
finally {
	restoreStackSize(stackSize);
}

rule__App__Group__8__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAppAccess().getBricksAssignment_8()); }
(rule__App__BricksAssignment_8)*
{ after(grammarAccess.getAppAccess().getBricksAssignment_8()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__App__Group__9
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__App__Group__9__Impl
	rule__App__Group__10
;
finally {
	restoreStackSize(stackSize);
}

rule__App__Group__9__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAppAccess().getRightCurlyBracketKeyword_9()); }

	'}' 

{ after(grammarAccess.getAppAccess().getRightCurlyBracketKeyword_9()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__App__Group__10
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__App__Group__10__Impl
	rule__App__Group__11
;
finally {
	restoreStackSize(stackSize);
}

rule__App__Group__10__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAppAccess().getStatesKeyword_10()); }

	'states' 

{ after(grammarAccess.getAppAccess().getStatesKeyword_10()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__App__Group__11
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__App__Group__11__Impl
	rule__App__Group__12
;
finally {
	restoreStackSize(stackSize);
}

rule__App__Group__11__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAppAccess().getLeftCurlyBracketKeyword_11()); }

	'{' 

{ after(grammarAccess.getAppAccess().getLeftCurlyBracketKeyword_11()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__App__Group__12
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__App__Group__12__Impl
	rule__App__Group__13
;
finally {
	restoreStackSize(stackSize);
}

rule__App__Group__12__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAppAccess().getStatesAssignment_12()); }
(rule__App__StatesAssignment_12)
{ after(grammarAccess.getAppAccess().getStatesAssignment_12()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__App__Group__13
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__App__Group__13__Impl
	rule__App__Group__14
;
finally {
	restoreStackSize(stackSize);
}

rule__App__Group__13__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAppAccess().getStatesAssignment_13()); }
(rule__App__StatesAssignment_13)*
{ after(grammarAccess.getAppAccess().getStatesAssignment_13()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__App__Group__14
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__App__Group__14__Impl
	rule__App__Group__15
;
finally {
	restoreStackSize(stackSize);
}

rule__App__Group__14__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAppAccess().getRightCurlyBracketKeyword_14()); }

	'}' 

{ after(grammarAccess.getAppAccess().getRightCurlyBracketKeyword_14()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__App__Group__15
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__App__Group__15__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__App__Group__15__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAppAccess().getRightCurlyBracketKeyword_15()); }

	'}' 

{ after(grammarAccess.getAppAccess().getRightCurlyBracketKeyword_15()); }
)

;
finally {
	restoreStackSize(stackSize);
}


































rule__Brick__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Brick__Group__0__Impl
	rule__Brick__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Brick__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBrickAccess().getAlternatives_0()); }
(rule__Brick__Alternatives_0)
{ after(grammarAccess.getBrickAccess().getAlternatives_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Brick__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Brick__Group__1__Impl
	rule__Brick__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Brick__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBrickAccess().getNameAssignment_1()); }
(rule__Brick__NameAssignment_1)
{ after(grammarAccess.getBrickAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Brick__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Brick__Group__2__Impl
	rule__Brick__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Brick__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBrickAccess().getColonKeyword_2()); }

	':' 

{ after(grammarAccess.getBrickAccess().getColonKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Brick__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Brick__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Brick__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBrickAccess().getPinAssignment_3()); }
(rule__Brick__PinAssignment_3)
{ after(grammarAccess.getBrickAccess().getPinAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__State__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__State__Group__0__Impl
	rule__State__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__State__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateAccess().getNameAssignment_0()); }
(rule__State__NameAssignment_0)
{ after(grammarAccess.getStateAccess().getNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__State__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__State__Group__1__Impl
	rule__State__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__State__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateAccess().getLeftCurlyBracketKeyword_1()); }

	'{' 

{ after(grammarAccess.getStateAccess().getLeftCurlyBracketKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__State__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__State__Group__2__Impl
	rule__State__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__State__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateAccess().getActionsAssignment_2()); }
(rule__State__ActionsAssignment_2)
{ after(grammarAccess.getStateAccess().getActionsAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__State__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__State__Group__3__Impl
	rule__State__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__State__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateAccess().getActionsAssignment_3()); }
(rule__State__ActionsAssignment_3)*
{ after(grammarAccess.getStateAccess().getActionsAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__State__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__State__Group__4__Impl
	rule__State__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__State__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateAccess().getTransitionAssignment_4()); }
(rule__State__TransitionAssignment_4)
{ after(grammarAccess.getStateAccess().getTransitionAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__State__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__State__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__State__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateAccess().getRightCurlyBracketKeyword_5()); }

	'}' 

{ after(grammarAccess.getStateAccess().getRightCurlyBracketKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__EInt__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EInt__Group__0__Impl
	rule__EInt__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EInt__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEIntAccess().getHyphenMinusKeyword_0()); }
(
	'-' 
)?
{ after(grammarAccess.getEIntAccess().getHyphenMinusKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EInt__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EInt__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EInt__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEIntAccess().getINTTerminalRuleCall_1()); }
	RULE_INT
{ after(grammarAccess.getEIntAccess().getINTTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Sensor__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Sensor__Group__0__Impl
	rule__Sensor__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Sensor__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSensorAccess().getSensorAction_0()); }
(

)
{ after(grammarAccess.getSensorAccess().getSensorAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Sensor__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Sensor__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Sensor__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSensorAccess().getSensorKeyword_1()); }

	'sensor' 

{ after(grammarAccess.getSensorAccess().getSensorKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Actuator__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Actuator__Group__0__Impl
	rule__Actuator__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Actuator__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActuatorAccess().getActuatorAction_0()); }
(

)
{ after(grammarAccess.getActuatorAccess().getActuatorAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Actuator__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Actuator__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Actuator__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActuatorAccess().getActuatorKeyword_1()); }

	'actuator' 

{ after(grammarAccess.getActuatorAccess().getActuatorKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Action__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Action__Group__0__Impl
	rule__Action__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActionAccess().getSetKeyword_0()); }

	'set' 

{ after(grammarAccess.getActionAccess().getSetKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Action__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Action__Group__1__Impl
	rule__Action__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActionAccess().getActuatorAssignment_1()); }
(rule__Action__ActuatorAssignment_1)
{ after(grammarAccess.getActionAccess().getActuatorAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Action__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Action__Group__2__Impl
	rule__Action__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActionAccess().getToKeyword_2()); }

	'to' 

{ after(grammarAccess.getActionAccess().getToKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Action__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Action__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActionAccess().getValueAssignment_3()); }
(rule__Action__ValueAssignment_3)
{ after(grammarAccess.getActionAccess().getValueAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Transition__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Transition__Group__0__Impl
	rule__Transition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionAccess().getIfKeyword_0()); }

	'if' 

{ after(grammarAccess.getTransitionAccess().getIfKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Transition__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Transition__Group__1__Impl
	rule__Transition__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionAccess().getSensorAssignment_1()); }
(rule__Transition__SensorAssignment_1)
{ after(grammarAccess.getTransitionAccess().getSensorAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Transition__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Transition__Group__2__Impl
	rule__Transition__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionAccess().getIsKeyword_2()); }

	'is' 

{ after(grammarAccess.getTransitionAccess().getIsKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Transition__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Transition__Group__3__Impl
	rule__Transition__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionAccess().getValueAssignment_3()); }
(rule__Transition__ValueAssignment_3)
{ after(grammarAccess.getTransitionAccess().getValueAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Transition__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Transition__Group__4__Impl
	rule__Transition__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionAccess().getMoveToKeyword_4()); }

	'move to' 

{ after(grammarAccess.getTransitionAccess().getMoveToKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Transition__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Transition__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionAccess().getNextAssignment_5()); }
(rule__Transition__NextAssignment_5)
{ after(grammarAccess.getTransitionAccess().getNextAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}















rule__App__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAppAccess().getNameEStringParserRuleCall_1_0()); }
	ruleEString{ after(grammarAccess.getAppAccess().getNameEStringParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__App__InitialAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAppAccess().getInitialStateCrossReference_3_0()); }
(
{ before(grammarAccess.getAppAccess().getInitialStateEStringParserRuleCall_3_0_1()); }
	ruleEString{ after(grammarAccess.getAppAccess().getInitialStateEStringParserRuleCall_3_0_1()); }
)
{ after(grammarAccess.getAppAccess().getInitialStateCrossReference_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__App__BricksAssignment_7
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAppAccess().getBricksBrickParserRuleCall_7_0()); }
	ruleBrick{ after(grammarAccess.getAppAccess().getBricksBrickParserRuleCall_7_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__App__BricksAssignment_8
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAppAccess().getBricksBrickParserRuleCall_8_0()); }
	ruleBrick{ after(grammarAccess.getAppAccess().getBricksBrickParserRuleCall_8_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__App__StatesAssignment_12
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAppAccess().getStatesStateParserRuleCall_12_0()); }
	ruleState{ after(grammarAccess.getAppAccess().getStatesStateParserRuleCall_12_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__App__StatesAssignment_13
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAppAccess().getStatesStateParserRuleCall_13_0()); }
	ruleState{ after(grammarAccess.getAppAccess().getStatesStateParserRuleCall_13_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Brick__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBrickAccess().getNameEStringParserRuleCall_1_0()); }
	ruleEString{ after(grammarAccess.getBrickAccess().getNameEStringParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Brick__PinAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBrickAccess().getPinEIntParserRuleCall_3_0()); }
	ruleEInt{ after(grammarAccess.getBrickAccess().getPinEIntParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__State__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateAccess().getNameEStringParserRuleCall_0_0()); }
	ruleEString{ after(grammarAccess.getStateAccess().getNameEStringParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__State__ActionsAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateAccess().getActionsActionParserRuleCall_2_0()); }
	ruleAction{ after(grammarAccess.getStateAccess().getActionsActionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__State__ActionsAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateAccess().getActionsActionParserRuleCall_3_0()); }
	ruleAction{ after(grammarAccess.getStateAccess().getActionsActionParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__State__TransitionAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateAccess().getTransitionTransitionParserRuleCall_4_0()); }
	ruleTransition{ after(grammarAccess.getStateAccess().getTransitionTransitionParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Action__ActuatorAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActionAccess().getActuatorActuatorCrossReference_1_0()); }
(
{ before(grammarAccess.getActionAccess().getActuatorActuatorEStringParserRuleCall_1_0_1()); }
	ruleEString{ after(grammarAccess.getActionAccess().getActuatorActuatorEStringParserRuleCall_1_0_1()); }
)
{ after(grammarAccess.getActionAccess().getActuatorActuatorCrossReference_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Action__ValueAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActionAccess().getValueSignalEnumRuleCall_3_0()); }
	ruleSignal{ after(grammarAccess.getActionAccess().getValueSignalEnumRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__SensorAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionAccess().getSensorSensorCrossReference_1_0()); }
(
{ before(grammarAccess.getTransitionAccess().getSensorSensorEStringParserRuleCall_1_0_1()); }
	ruleEString{ after(grammarAccess.getTransitionAccess().getSensorSensorEStringParserRuleCall_1_0_1()); }
)
{ after(grammarAccess.getTransitionAccess().getSensorSensorCrossReference_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__ValueAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionAccess().getValueSignalEnumRuleCall_3_0()); }
	ruleSignal{ after(grammarAccess.getTransitionAccess().getValueSignalEnumRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__NextAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionAccess().getNextStateCrossReference_5_0()); }
(
{ before(grammarAccess.getTransitionAccess().getNextStateEStringParserRuleCall_5_0_1()); }
	ruleEString{ after(grammarAccess.getTransitionAccess().getNextStateEStringParserRuleCall_5_0_1()); }
)
{ after(grammarAccess.getTransitionAccess().getNextStateCrossReference_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


